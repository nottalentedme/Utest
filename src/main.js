import { Start } from './scenes/Start.js';
import { Field } from './scenes/Field.js';
import { tasks } from './data/tasks/tasks.js';
import { BeforeMountain } from './scenes/BeforeMountain.js';
import { Mountain } from './scenes/Mountain.js';
import { HighFlag } from './scenes/HighFlag.js';

const config = {
    type: Phaser.AUTO,
    title: 'Utest',
    description: '',
    parent: 'game-container',
    width: 1920,
    height: 1080,

    pixelArt: false,
    scene: [
        Start, Field, BeforeMountain, Mountain, HighFlag
    ],
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH
    },
};

export const game = new Phaser.Game(config);

let currentTask = 0;
let correctAnswersCount = 0;  // –°—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
let currentSceneIndex = 0;    // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã –≤ scenesOrder
const scenesOrder = ['Field', 'BeforeMountain', 'Mountain', 'HighFlag']; // –ø–æ—Ä—è–¥–æ–∫ —Å—Ü–µ–Ω

let editorInstance;

require.config({ paths: { vs: 'https://unpkg.com/monaco-editor@0.34.1/min/vs' } });
require(['vs/editor/editor.main'], function () {
    editorInstance = monaco.editor.create(document.getElementById('monaco'), {
        value: tasks[currentTask].functionSignature || '',
        language: 'python',
        theme: 'vs-dark',
        automaticLayout: true
    });

    window.editorInstance = editorInstance;

    showCurrentTask();

    // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥ #game-container
    const leftPanel = document.getElementById('left-panel');
    const hintToggleBtn = document.createElement('button');
    hintToggleBtn.id = 'toggle-hint-btn';
    hintToggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É';
    hintToggleBtn.style.margin = '8px 0 4px 0';
    hintToggleBtn.style.padding = '6px 12px';
    hintToggleBtn.style.borderRadius = '8px';
    hintToggleBtn.style.border = 'none';
    hintToggleBtn.style.backgroundColor = '#00bcd4';
    hintToggleBtn.style.color = 'white';
    hintToggleBtn.style.cursor = 'pointer';
    hintToggleBtn.style.fontSize = '14px';
    hintToggleBtn.style.width = 'fit-content';
    hintToggleBtn.style.userSelect = 'none';

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–∂–¥—É #game-container –∏ #hint
    const gameContainer = document.getElementById('game-container');
    const hintDiv = document.getElementById('hint');
    leftPanel.insertBefore(hintToggleBtn, hintDiv);

    hintDiv.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    hintToggleBtn.addEventListener('click', () => {
        if (hintDiv.style.display === 'none') {
            hintDiv.style.display = 'block';
            hintToggleBtn.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É';
        } else {
            hintDiv.style.display = 'none';
            hintToggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É';
        }
    });
});

export function showCurrentTask() {
    const task = tasks[currentTask];
    if (!task) return;

    document.getElementById('task-description').textContent = task.description || '';
    document.getElementById('task-input').textContent = task.input || '';
    document.getElementById('task-output').textContent = task.output || '';
    document.getElementById('hint').textContent = task.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.";

    if (window.editorInstance) {
        window.editorInstance.setValue(task.starterCode || task.functionSignature || '');
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
    const hintDiv = document.getElementById('hint');
    const toggleHintBtn = document.getElementById('toggle-hint-btn');
    if (hintDiv && toggleHintBtn) {
        hintDiv.style.display = 'none';
        toggleHintBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É';
    }
}

export function goToNextTask() {
    currentTask++;
    if (currentTask < tasks.length) {
        showCurrentTask();
    } else {
        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã.');
        window.editorInstance.setValue('');
        document.getElementById('run-button').disabled = true;
    }
}

let pyodide;

async function initPyodideAndSetup() {
    pyodide = await loadPyodide();

    document.getElementById('run-button').addEventListener('click', async () => {
        const userCode = window.editorInstance.getValue();
        const task = tasks[currentTask];

        try {
            pyodide.globals.clear();

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥
            await pyodide.runPythonAsync(userCode);

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏ –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const result = await pyodide.runPythonAsync(task.test);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            let isCorrect;
            if (typeof task.expected === 'object') {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ JSON
                isCorrect = JSON.stringify(result.toJs ? result.toJs() : result)
                    === JSON.stringify(task.expected);
            } else {
                // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                isCorrect = result.toString() === task.expected.toString();
            }

            if (isCorrect) {
                document.getElementById('result').textContent = '‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
                document.getElementById('next-button').style.display = 'inline-block';
                document.getElementById('run-button').disabled = true;

                correctAnswersCount++;

                // –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞
                const activeSceneKey = scenesOrder[currentSceneIndex];
                const activeScene = game.scene.getScene(activeSceneKey);

                if (activeScene && typeof activeScene.moveHero === 'function') {
                    activeScene.moveHero(300);
                }

                // –ï—Å–ª–∏ –º—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ü–µ–Ω–µ (HighFlag)
                if (activeSceneKey === 'HighFlag') {
                    if (correctAnswersCount >= 3) {
                        alert('üéâ –í—ã –º–æ–ª–æ–¥–µ—Ü! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä–æ–≤–æ–π —Ç–µ—Å—Ç Utest!');
                        document.getElementById('run-button').disabled = true;
                        document.getElementById('next-button').style.display = 'none';
                        return; // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                    }
                } else {
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ –ø–æ—Å–ª–µ 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ö
                    if (correctAnswersCount >= 2) {
                        correctAnswersCount = 0;
                        currentSceneIndex++;

                        if (currentSceneIndex < scenesOrder.length) {
                            game.scene.start(scenesOrder[currentSceneIndex]);
                        } else {
                            console.log('–í—Å–µ —Å—Ü–µ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
                        }
                    }
                }

            } else {
                document.getElementById('result').textContent = `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`;

                // –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
                correctAnswersCount = Math.max(0, correctAnswersCount - 1);

                const activeSceneKey = scenesOrder[currentSceneIndex];
                const activeScene = game.scene.getScene(activeSceneKey);
                if (activeScene && typeof activeScene.moveHero === 'function') {
                    activeScene.moveHero(-300);
                }
            }
        } catch (e) {
            console.log(e.message);
        }
    });

    document.getElementById('next-button').addEventListener('click', () => {
        document.getElementById('next-button').style.display = 'none';
        document.getElementById('run-button').disabled = false;
        document.getElementById('result').textContent = '';
        goToNextTask();

        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
        const hintDiv = document.getElementById('hint');
        const toggleHintBtn = document.getElementById('toggle-hint-btn');
        if (hintDiv && toggleHintBtn) {
            hintDiv.style.display = 'none';
            toggleHintBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É';
        }
    });
}

initPyodideAndSetup();

document.getElementById('start-button').addEventListener('click', () => {
    document.getElementById('start-screen').style.display = 'none';
    document.getElementById('editor-container').style.display = 'flex'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä

    // –°—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã
    game.scene.start('Field');
});
